#!/usr/bin/env bash
#
#   capps-bind - start containerized named server
#
#   Usage: caps-named [-C <configdir>] [-T] <docker-args> -- named-args
#
#   This binds /dev/log into the container so that programs using
#   syslog will log to the system logs just as if they were not
#   running in a container. (The log messages have no indication that
#   the program was in a container.) The -L option additionally sends
#   stdout/err to the systemd journal under the image and container
#   name.
#
#   Handy Docker args:
#     --rm=no           Keep container after exiting
#     --detach=false    Show stdout instead of having to use `docker logs`
#     --name=foo        Set name of container
#     --entrypoint=cmd  Run different command in container.
#                       Only cmd here, args to it go after `--`.
#
set -e -o pipefail

die() { echo 1>&2 "$(basename "$0"):" "$@"; exit 1; }

base=$(cd "$(dirname "$0")" && pwd -P)
cd $base
sudo -v || die 'Cannot sudo to run docker'
docker='sudo docker'

image=capps-bind:latest
configdir=/etc/bind         # Uses named.conf in this dir
logopts=()
port=53
dockerargs=()
while true; do case "$1" in
    -C)     #   -C <configdir>
            shift; configdir="$1"; shift;
            [[ $configdir = /* ]] || die '-C configdir must start with /'
            ;;
    -L)     #   Log stdout/err to systemd journal; doesn't affect /dev/log
            shift
            logopts+=("--log-driver=journald")
            logopts+=("--log-opt=tag={{.ImageName}}:{{.Name}}")
            ;;
    -T)     #   Test mode; you may want to add --detach=false
            shift; image=capps-bind:test; port=1053; namedargs=-g
            ;;
    --)     shift; break;;              # named args follow
    '')     break;;
    *)      dockerargs+=("$1"); shift;;
esac; done

#   XXX Always using --rm means we need to move logs outside container.
$docker run --rm --detach=true \
    "${logopts[@]}" -v /dev/log:/dev/log \
    -v $configdir:/etc/bind \
    -p $port:53 -p $port:53/udp \
    -u named \
    "${dockerargs[@]}" $image $namedargs "$@"
